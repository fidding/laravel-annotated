<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInit2ed2a3ae08448c5527a0d43bdedd4fd9
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        // 只允许引入Composer\Autoload\ClassLoader类
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

        //
        // step1: 加载ClassLoader类
        //
        // 激活自动装载静态方法loadClassLoader, 第一个参数数组可以改写为'ComposerAutoloaderInit2ed2a3ae08448c5527a0d43bdedd4fd9::loadClassLoader'
        spl_autoload_register(array('ComposerAutoloaderInit2ed2a3ae08448c5527a0d43bdedd4fd9', 'loadClassLoader'), true, true);
        // 加载ClassLoader类(将会调用静态方法loadClassLoader实现加载)并绑定到自身
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        // 注销自动装载方法loadClassLoader
        spl_autoload_unregister(array('ComposerAutoloaderInit2ed2a3ae08448c5527a0d43bdedd4fd9', 'loadClassLoader'));

        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
        if ($useStaticLoader) {
            require_once __DIR__ . '/autoload_static.php';

            call_user_func(\Composer\Autoload\ComposerStaticInit2ed2a3ae08448c5527a0d43bdedd4fd9::getInitializer($loader));
        } else {
            // 加载命名空间与文件目录映射类
            $map = require __DIR__ . '/autoload_namespaces.php';
            foreach ($map as $namespace => $path) {
                $loader->set($namespace, $path);
            }

            $map = require __DIR__ . '/autoload_psr4.php';
            foreach ($map as $namespace => $path) {
                $loader->setPsr4($namespace, $path);
            }

            $classMap = require __DIR__ . '/autoload_classmap.php';
            if ($classMap) {
                $loader->addClassMap($classMap);
            }
        }

        $loader->register(true);

        if ($useStaticLoader) {
            $includeFiles = Composer\Autoload\ComposerStaticInit2ed2a3ae08448c5527a0d43bdedd4fd9::$files;
        } else {
            $includeFiles = require __DIR__ . '/autoload_files.php';
        }
        foreach ($includeFiles as $fileIdentifier => $file) {
            composerRequire2ed2a3ae08448c5527a0d43bdedd4fd9($fileIdentifier, $file);
        }

        return $loader;
    }
}

function composerRequire2ed2a3ae08448c5527a0d43bdedd4fd9($fileIdentifier, $file)
{
    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
        require $file;

        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
    }
}
